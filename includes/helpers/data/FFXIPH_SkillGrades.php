<?php


class FFXIPH_SkillGrades {

    /**
     * 0 HP
     * 1 MP
     * 2 STR
     * 3 DEX
     * 4 VIT
     * 5 AGI
     * 6 INT
     * 7 MND
     * 8 CHR
    */
    // ASB/LSB functions
    public static $JobGrades = array(
        // HP,MP,STR,DEX,VIT,AGI,INT,MND,CHR
        [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], // NON
        [ 2, 0, 1, 3, 4, 3, 6, 6, 5 ], // WAR
        [ 1, 0, 3, 2, 1, 6, 7, 4, 5 ], // MNK
        [ 5, 3, 4, 6, 4, 5, 5, 1, 3 ], // WHM
        [ 6, 2, 6, 3, 6, 3, 1, 5, 4 ], // BLM
        [ 4, 4, 4, 4, 5, 5, 3, 3, 4 ], // RDM
        [ 4, 0, 4, 1, 4, 2, 3, 7, 7 ], // THF
        [ 3, 6, 2, 5, 1, 7, 7, 3, 3 ], // PLD
        [ 3, 6, 1, 3, 3, 4, 3, 7, 7 ], // DRK
        [ 3, 0, 4, 3, 4, 6, 5, 5, 1 ], // BST
        [ 4, 0, 4, 4, 4, 6, 4, 4, 2 ], // BRD
        [ 5, 0, 5, 4, 4, 1, 5, 4, 5 ], // RNG
        [ 2, 0, 3, 3, 3, 4, 5, 5, 4 ], // SAM
        [ 4, 0, 3, 2, 3, 2, 4, 7, 6 ], // NIN
        [ 3, 0, 2, 4, 3, 4, 6, 5, 3 ], // DRG
        [ 7, 1, 6, 5, 6, 4, 2, 2, 2 ], // SMN
        [ 4, 4, 5, 5, 5, 5, 5, 5, 5 ], // BLU
        [ 4, 0, 5, 3, 5, 2, 3, 5, 5 ], // COR
        [ 4, 0, 5, 2, 4, 3, 5, 6, 3 ], // PUP
        [ 4, 0, 4, 3, 5, 2, 6, 6, 2 ], // DNC
        [ 5, 4, 6, 4, 5, 4, 3, 4, 3 ], // SCH
        [ 3, 2, 6, 4, 5, 4, 3, 3, 4 ], // GEO
        [ 3, 6, 3, 4, 5, 2, 4, 4, 6 ]  // RUN
     ) ;


/************************************************************************
 *                                                                        *
 *  Array with the levels of characteristics by race                      *
 *                                                                        *
 ************************************************************************/

    public static $RaceGrades = array(
       // HP,MP,STR,DEX,VIT,AGI,INT,MND
        [ 4, 4, 4, 4, 4, 4, 4, 4, 4 ], // Hume
        [ 3, 5, 2, 5, 3, 6, 6, 2, 4 ], // Elvaan
        [ 7, 1, 6, 4, 5, 3, 1, 5, 4 ], // Tarutaru
        [ 4, 4, 5, 1, 5, 2, 4, 5, 6 ], // Mithra
        [ 1, 7, 3, 4, 1, 5, 5, 4, 6 ], // Galka
    );

/************************************************************************
 *                                                                        *
 *  Array with the levels of palyer HP Scale per rank                     *
 *                                                                        *
 ************************************************************************/

    public static $HPScale = array(
    // base, <30, <60, <75, >75
        [ 0, 0, 0, 0, 0 ],  // 0
        [ 19, 9, 1, 3, 3 ], // A
        [ 17, 8, 1, 3, 3 ], // B
        [ 16, 7, 1, 3, 3 ], // C
        [ 14, 6, 0, 3, 3 ], // D
        [ 13, 5, 0, 2, 2 ], // E
        [ 11, 4, 0, 2, 2 ], // F
        [ 10, 3, 0, 2, 2 ] // G
    );

/************************************************************************
 *                                                                        *
 *  Array with the levels of mob HP Scale per rank                        *
 *                                                                        *
 ************************************************************************/

    public static $MobHPScale = array(
        // Base | Job/SJ Scale | ScaleX
        [ 0, 0, 0  ],  // 0
        [ 36, 9, 1 ], // A
        [ 33, 8, 1 ], // B
        [ 32, 7, 1 ], // C
        [ 29, 6, 0 ], // D
        [ 27, 5, 0 ], // E
        [ 24, 4, 0 ], // F
        [ 22, 3, 0 ] // G
    );

/************************************************************************
 *                                                                        *
 *  Array with the levels of MP Scale per rank                            *
 *                                                                        *
 ************************************************************************/

    public static $MPScale = array(
        // base, <60, >60
        [ 0, 0, 0 ],    // 0
        [ 16, 6, 4 ],   // A
        [ 14, 5, 4 ],   // B
        [ 12, 4, 4 ],   // C
        [ 10, 3, 4 ],   // D
        [ 8, 2, 3 ],    // E
        [ 6, 1, 2 ],    // F
        [ 4, 0.5, 1 ] // G
    );

/************************************************************************
 *                                                                        *
 *  Array with the levels of base stat scale per rank                     *
 *                                                                        *
 ************************************************************************/

    public static $StatScale = array(
      // base, <60, <75, >75
        [ 0,    0,   0,    0 ],             // 0
        [ 5, 0.50, 0.10, 0.35 ],    // A
        [ 4, 0.45, 0.225, 0.35 ],   // B
        [ 4, 0.40, 0.285, 0.35 ],   // C
        [ 3, 0.35, 0.35, 0.35 ],    // D
        [ 3, 0.30, 0.35, 0.35 ],    // E
        [ 2, 0.25, 0.425, 0.35 ],   // F
        [ 2, 0.20, 0.425, 0.35 ]    // G
    );

    /*
    --     SKILL LEVEL CALCULATOR
    --     Returns a skill level based on level and rating.
    --
    --    See: https://wiki.ffo.jp/html/2570.html
    --
    --    The arguments are skill rank (numerical), and level.  1 is A+, 2 is A-, and so on.

    -- skillLevelTable contains matched pairs based on rank; First value is multiplier, second is additive value.  Index is the subtracted
    -- baseInRange value (see below)
    -- Original formula: ((level - <baseInRange>) * <multiplier>) + <additive>; where level is a range defined in utils.getSkillLvl

    */

    public static $SkillLevelTable = array(

    //  --         A+             A-             B+             B              B-             C+             C              C-             D              E              F             G
    1  => [ [ 3.00,   6 ], [ 3.00,   6 ], [ 2.90,   5 ], [ 2.90,   5 ], [ 2.90,   5 ], [ 2.80,   5 ], [ 2.80,   5 ], [ 2.80,   5 ], [ 2.70,   4 ], [ 2.50,   4 ], [ 2.30,   4 ], [ 2.00,   3 ] ], //-- Level <= 50
    50 => [ [ 5.00, 153 ], [ 5.00, 153 ], [ 4.90, 147 ], [ 4.90, 147 ], [ 4.90, 147 ], [ 4.80, 142 ], [ 4.80, 142 ], [ 4.80, 142 ], [ 4.70, 136 ], [ 4.50, 126 ], [ 4.30, 116 ], [ 4.00, 101 ] ], //-- Level > 50 and Level <= 60
    60 => [ [ 4.85, 203 ], [ 4.10, 203 ], [ 3.70, 196 ], [ 3.23, 196 ], [ 2.70, 196 ], [ 2.50, 190 ], [ 2.25, 190 ], [ 2.00, 190 ], [ 1.85, 183 ], [ 1.95, 171 ], [ 2.05, 159 ], [ 2.00, 141 ] ], //-- Level > 60 and Level <= 70
    70 => [ [ 5.00, 251 ], [ 5.00, 244 ], [ 4.60, 233 ], [ 4.40, 228 ], [ 3.40, 223 ], [ 3.00, 215 ], [ 2.60, 212 ], [ 2.00, 210 ], [ 1.85, 201 ], [ 2.00, 190 ], [ 2.00, 179 ], [ 2.00, 161 ] ], //-- Level > 70 and Level <= 75
    75 => [ [ 5.00, 251 ], [ 5.00, 244 ], [ 5.00, 256 ], [ 5.00, 250 ], [ 5.00, 240 ], [ 5.00, 230 ], [ 5.00, 225 ], [ 5.00, 220 ], [ 4.00, 210 ], [ 3.00, 200 ], [ 2.00, 189 ], [ 2.00, 171 ] ], //-- Level > 75 and Level <= 80
    // [80] = [ [ 6.00, 301 ], [ 6.00, 294 ], [ 6.00, 281 ], [ 6.00, 275 ], [ 6.00, 265 ], [ 6.00, 255 ], [ 6.00, 250 ], [ 6.00, 245 ], [ 5.00, 230 ], [ 4.00, 215 ], [ 3.00, 199 ], [ 2.00, 181 ] ], //-- Level > 80 and Level <= 90
    // [90] = [ [ 7.00, 361 ], [ 7.00, 354 ], [ 7.00, 341 ], [ 7.00, 335 ], [ 7.00, 325 ], [ 7.00, 315 ], [ 7.00, 310 ], [ 7.00, 305 ], [ 6.00, 280 ], [ 5.00, 255 ], [ 4.00, 229 ], [ 2.00, 201 ] ], //- Level > 90
    );


    /************************************************************************
     *                                                                        *
     *  Random Increment based on level                                       *
     *                                                                        *
     ************************************************************************/

    public static $MobRBI = array(
        // RI | Scale
        [ 0, 0 ],  // 0
        [ 1, 0 ],  // 1
        [ 2, 0 ],  // 2
        [ 3, 3 ],  // 3
        [ 4, 7 ],  // 4
        [ 5, 14 ], // 5
    );

     /************************************************************************
     *                                                                       *
     *  Base value for stat calculations                                     *
     *                                                                       *
     ************************************************************************/

    public static function baseToRank($rank, $lvl){
        switch ($rank)
        {
            case 1:
                return floor(5 + (($lvl - 1) * 50) / 100); // A
            case 2:
                return floor(4 + (($lvl - 1) * 45) / 100); // B
            case 3:
                return floor(4 + (($lvl - 1) * 40) / 100); // C
            case 4:
                return floor(3 + (($lvl - 1) * 35) / 100); // D
            case 5:
                return floor(3 + (($lvl - 1) * 30) / 100); // E
            case 6:
                return floor(2 + (($lvl - 1) * 25) / 100); // F
            case 7:
                return floor(2 + (($lvl - 1) * 20) / 100); // G
        }

        return 0;
    }

}

?>
